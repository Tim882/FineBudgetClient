/* tslint:disable */
/* eslint-disable */
/**
 * FineBudget
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountRequestDto
 */
export interface AccountRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AccountRequestDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRequestDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountRequestDto
     */
    'balance'?: number;
}
/**
 * 
 * @export
 * @interface AccountResponseDto
 */
export interface AccountResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDto
     */
    'balance'?: number;
    /**
     * 
     * @type {Array<CostResponseDto>}
     * @memberof AccountResponseDto
     */
    'costs'?: Array<CostResponseDto> | null;
    /**
     * 
     * @type {Array<IncomeResponseDto>}
     * @memberof AccountResponseDto
     */
    'incomes'?: Array<IncomeResponseDto> | null;
}
/**
 * 
 * @export
 * @interface AccountResponseDtoApiResponse
 */
export interface AccountResponseDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AccountResponseDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDtoApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {AccountResponseDto}
     * @memberof AccountResponseDtoApiResponse
     */
    'data'?: AccountResponseDto;
}
/**
 * 
 * @export
 * @interface AccountResponseDtoPaginatedResponse
 */
export interface AccountResponseDtoPaginatedResponse {
    /**
     * 
     * @type {Array<AccountResponseDto>}
     * @memberof AccountResponseDtoPaginatedResponse
     */
    'data'?: Array<AccountResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoPaginatedResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoPaginatedResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoPaginatedResponse
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface AccountResponseDtoPaginatedResponseApiResponse
 */
export interface AccountResponseDtoPaginatedResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AccountResponseDtoPaginatedResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDtoPaginatedResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResponseDtoPaginatedResponseApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccountResponseDtoPaginatedResponseApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {AccountResponseDtoPaginatedResponse}
     * @memberof AccountResponseDtoPaginatedResponseApiResponse
     */
    'data'?: AccountResponseDtoPaginatedResponse;
}
/**
 * 
 * @export
 * @interface AssetRequestDto
 */
export interface AssetRequestDto {
    /**
     * 
     * @type {AssetType}
     * @memberof AssetRequestDto
     */
    'assetType'?: AssetType;
    /**
     * 
     * @type {string}
     * @memberof AssetRequestDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetRequestDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AssetRequestDto
     */
    'value'?: number;
}


/**
 * 
 * @export
 * @interface AssetResponseDto
 */
export interface AssetResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {AssetType}
     * @memberof AssetResponseDto
     */
    'assetType'?: AssetType;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDto
     */
    'value'?: number;
}


/**
 * 
 * @export
 * @interface AssetResponseDtoApiResponse
 */
export interface AssetResponseDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDtoApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {AssetResponseDto}
     * @memberof AssetResponseDtoApiResponse
     */
    'data'?: AssetResponseDto;
}
/**
 * 
 * @export
 * @interface AssetResponseDtoPaginatedResponse
 */
export interface AssetResponseDtoPaginatedResponse {
    /**
     * 
     * @type {Array<AssetResponseDto>}
     * @memberof AssetResponseDtoPaginatedResponse
     */
    'data'?: Array<AssetResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoPaginatedResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoPaginatedResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoPaginatedResponse
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface AssetResponseDtoPaginatedResponseApiResponse
 */
export interface AssetResponseDtoPaginatedResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AssetResponseDtoPaginatedResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDtoPaginatedResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AssetResponseDtoPaginatedResponseApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AssetResponseDtoPaginatedResponseApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {AssetResponseDtoPaginatedResponse}
     * @memberof AssetResponseDtoPaginatedResponseApiResponse
     */
    'data'?: AssetResponseDtoPaginatedResponse;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const AssetType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type AssetType = typeof AssetType[keyof typeof AssetType];


/**
 * 
 * @export
 * @interface CostRequestDto
 */
export interface CostRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CostRequestDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'transactionNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CostRequestDto
     */
    'required'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CostRequestDto
     */
    'costCategory'?: number;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'assetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CostRequestDto
     */
    'liabilityId'?: string | null;
}
/**
 * 
 * @export
 * @interface CostResponseDto
 */
export interface CostResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CostResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDto
     */
    'transactionNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CostResponseDto
     */
    'required'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDto
     */
    'costCategory'?: number;
}
/**
 * 
 * @export
 * @interface CostResponseDtoApiResponse
 */
export interface CostResponseDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CostResponseDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDtoApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {CostResponseDto}
     * @memberof CostResponseDtoApiResponse
     */
    'data'?: CostResponseDto;
}
/**
 * 
 * @export
 * @interface CostResponseDtoPaginatedResponse
 */
export interface CostResponseDtoPaginatedResponse {
    /**
     * 
     * @type {Array<CostResponseDto>}
     * @memberof CostResponseDtoPaginatedResponse
     */
    'data'?: Array<CostResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoPaginatedResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoPaginatedResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoPaginatedResponse
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface CostResponseDtoPaginatedResponseApiResponse
 */
export interface CostResponseDtoPaginatedResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CostResponseDtoPaginatedResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDtoPaginatedResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CostResponseDtoPaginatedResponseApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CostResponseDtoPaginatedResponseApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {CostResponseDtoPaginatedResponse}
     * @memberof CostResponseDtoPaginatedResponseApiResponse
     */
    'data'?: CostResponseDtoPaginatedResponse;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const IncomeCategory = {
    NUMBER_0: 0
} as const;

export type IncomeCategory = typeof IncomeCategory[keyof typeof IncomeCategory];


/**
 * 
 * @export
 * @interface IncomeRequestDto
 */
export interface IncomeRequestDto {
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeRequestDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'transactionNumber'?: string | null;
    /**
     * 
     * @type {IncomeCategory}
     * @memberof IncomeRequestDto
     */
    'incomeCategory'?: IncomeCategory;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'assetId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeRequestDto
     */
    'liabilityId'?: string | null;
}


/**
 * 
 * @export
 * @interface IncomeResponseDto
 */
export interface IncomeResponseDto {
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDto
     */
    'value'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDto
     */
    'transactionNumber'?: string | null;
    /**
     * 
     * @type {IncomeCategory}
     * @memberof IncomeResponseDto
     */
    'incomeCategory'?: IncomeCategory;
}


/**
 * 
 * @export
 * @interface IncomeResponseDtoApiResponse
 */
export interface IncomeResponseDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof IncomeResponseDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDtoApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {IncomeResponseDto}
     * @memberof IncomeResponseDtoApiResponse
     */
    'data'?: IncomeResponseDto;
}
/**
 * 
 * @export
 * @interface IncomeResponseDtoPaginatedResponse
 */
export interface IncomeResponseDtoPaginatedResponse {
    /**
     * 
     * @type {Array<IncomeResponseDto>}
     * @memberof IncomeResponseDtoPaginatedResponse
     */
    'data'?: Array<IncomeResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoPaginatedResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoPaginatedResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoPaginatedResponse
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface IncomeResponseDtoPaginatedResponseApiResponse
 */
export interface IncomeResponseDtoPaginatedResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof IncomeResponseDtoPaginatedResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDtoPaginatedResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IncomeResponseDtoPaginatedResponseApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IncomeResponseDtoPaginatedResponseApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {IncomeResponseDtoPaginatedResponse}
     * @memberof IncomeResponseDtoPaginatedResponseApiResponse
     */
    'data'?: IncomeResponseDtoPaginatedResponse;
}
/**
 * 
 * @export
 * @interface LiabilityRequestDto
 */
export interface LiabilityRequestDto {
    /**
     * 
     * @type {LiabilityType}
     * @memberof LiabilityRequestDto
     */
    'liabilityType'?: LiabilityType;
    /**
     * 
     * @type {string}
     * @memberof LiabilityRequestDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof LiabilityRequestDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityRequestDto
     */
    'value'?: number;
}


/**
 * 
 * @export
 * @interface LiabilityResponseDto
 */
export interface LiabilityResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {LiabilityType}
     * @memberof LiabilityResponseDto
     */
    'liabilityType'?: LiabilityType;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDto
     */
    'value'?: number;
}


/**
 * 
 * @export
 * @interface LiabilityResponseDtoApiResponse
 */
export interface LiabilityResponseDtoApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LiabilityResponseDtoApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDtoApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDtoApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {LiabilityResponseDto}
     * @memberof LiabilityResponseDtoApiResponse
     */
    'data'?: LiabilityResponseDto;
}
/**
 * 
 * @export
 * @interface LiabilityResponseDtoPaginatedResponse
 */
export interface LiabilityResponseDtoPaginatedResponse {
    /**
     * 
     * @type {Array<LiabilityResponseDto>}
     * @memberof LiabilityResponseDtoPaginatedResponse
     */
    'data'?: Array<LiabilityResponseDto> | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoPaginatedResponse
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoPaginatedResponse
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoPaginatedResponse
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoPaginatedResponse
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface LiabilityResponseDtoPaginatedResponseApiResponse
 */
export interface LiabilityResponseDtoPaginatedResponseApiResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LiabilityResponseDtoPaginatedResponseApiResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDtoPaginatedResponseApiResponse
     */
    'message'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LiabilityResponseDtoPaginatedResponseApiResponse
     */
    'additionalMessage'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LiabilityResponseDtoPaginatedResponseApiResponse
     */
    'errorCode'?: number;
    /**
     * 
     * @type {LiabilityResponseDtoPaginatedResponse}
     * @memberof LiabilityResponseDtoPaginatedResponseApiResponse
     */
    'data'?: LiabilityResponseDtoPaginatedResponse;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const LiabilityType = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type LiabilityType = typeof LiabilityType[keyof typeof LiabilityType];


/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet: async (pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['FilterValue'] = filterValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsIdDelete', 'id', id)
            const localVarPath = `/api/Accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsIdGet', 'id', id)
            const localVarPath = `/api/Accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdPut: async (id: string, accountRequestDto?: AccountRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsIdPut', 'id', id)
            const localVarPath = `/api/Accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsPost: async (accountRequestDto?: AccountRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDtoPaginatedResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.apiAccountsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.apiAccountsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.apiAccountsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsIdPut(id: string, accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsIdPut(id, accountRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.apiAccountsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsPost(accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsPost(accountRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.apiAccountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDtoPaginatedResponseApiResponse> {
            return localVarFp.apiAccountsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDtoApiResponse> {
            return localVarFp.apiAccountsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsIdPut(id: string, accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountsIdPut(id, accountRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountRequestDto} [accountRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsPost(accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AccountResponseDtoApiResponse> {
            return localVarFp.apiAccountsPost(accountRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [filterValue] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).apiAccountsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).apiAccountsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).apiAccountsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {AccountRequestDto} [accountRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsIdPut(id: string, accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).apiAccountsIdPut(id, accountRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountRequestDto} [accountRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsPost(accountRequestDto?: AccountRequestDto, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).apiAccountsPost(accountRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsGet: async (pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['FilterValue'] = filterValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdDelete', 'id', id)
            const localVarPath = `/api/Assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdGet', 'id', id)
            const localVarPath = `/api/Assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdPut: async (id: string, assetRequestDto?: AssetRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdPut', 'id', id)
            const localVarPath = `/api/Assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsPost: async (assetRequestDto?: AssetRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assetRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponseDtoPaginatedResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdPut(id: string, assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdPut(id, assetRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsPost(assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsPost(assetRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<AssetResponseDtoPaginatedResponseApiResponse> {
            return localVarFp.apiAssetsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAssetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AssetResponseDtoApiResponse> {
            return localVarFp.apiAssetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdPut(id: string, assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAssetsIdPut(id, assetRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AssetRequestDto} [assetRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsPost(assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AssetResponseDtoApiResponse> {
            return localVarFp.apiAssetsPost(assetRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [filterValue] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {AssetRequestDto} [assetRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdPut(id: string, assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdPut(id, assetRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AssetRequestDto} [assetRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsPost(assetRequestDto?: AssetRequestDto, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsPost(assetRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CostsApi - axios parameter creator
 * @export
 */
export const CostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsGet: async (pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Costs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['FilterValue'] = filterValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCostsIdDelete', 'id', id)
            const localVarPath = `/api/Costs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCostsIdGet', 'id', id)
            const localVarPath = `/api/Costs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdPut: async (id: string, costRequestDto?: CostRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCostsIdPut', 'id', id)
            const localVarPath = `/api/Costs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(costRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsPost: async (costRequestDto?: CostRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Costs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(costRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CostsApi - functional programming interface
 * @export
 */
export const CostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCostsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostResponseDtoPaginatedResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCostsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostsApi.apiCostsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCostsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCostsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostsApi.apiCostsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCostsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCostsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostsApi.apiCostsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCostsIdPut(id: string, costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCostsIdPut(id, costRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostsApi.apiCostsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCostsPost(costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCostsPost(costRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostsApi.apiCostsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CostsApi - factory interface
 * @export
 */
export const CostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CostsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CostResponseDtoPaginatedResponseApiResponse> {
            return localVarFp.apiCostsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCostsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CostResponseDtoApiResponse> {
            return localVarFp.apiCostsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsIdPut(id: string, costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCostsIdPut(id, costRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CostRequestDto} [costRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCostsPost(costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CostResponseDtoApiResponse> {
            return localVarFp.apiCostsPost(costRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CostsApi - object-oriented interface
 * @export
 * @class CostsApi
 * @extends {BaseAPI}
 */
export class CostsApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [filterValue] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApi
     */
    public apiCostsGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig) {
        return CostsApiFp(this.configuration).apiCostsGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApi
     */
    public apiCostsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return CostsApiFp(this.configuration).apiCostsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApi
     */
    public apiCostsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return CostsApiFp(this.configuration).apiCostsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {CostRequestDto} [costRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApi
     */
    public apiCostsIdPut(id: string, costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig) {
        return CostsApiFp(this.configuration).apiCostsIdPut(id, costRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CostRequestDto} [costRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApi
     */
    public apiCostsPost(costRequestDto?: CostRequestDto, options?: RawAxiosRequestConfig) {
        return CostsApiFp(this.configuration).apiCostsPost(costRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IncomesApi - axios parameter creator
 * @export
 */
export const IncomesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesGet: async (pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Incomes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['FilterValue'] = filterValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncomesIdDelete', 'id', id)
            const localVarPath = `/api/Incomes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncomesIdGet', 'id', id)
            const localVarPath = `/api/Incomes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdPut: async (id: string, incomeRequestDto?: IncomeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiIncomesIdPut', 'id', id)
            const localVarPath = `/api/Incomes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesPost: async (incomeRequestDto?: IncomeRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Incomes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncomesApi - functional programming interface
 * @export
 */
export const IncomesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IncomesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncomesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeResponseDtoPaginatedResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncomesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomesApi.apiIncomesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncomesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncomesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomesApi.apiIncomesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncomesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncomesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomesApi.apiIncomesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncomesIdPut(id: string, incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncomesIdPut(id, incomeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomesApi.apiIncomesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiIncomesPost(incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiIncomesPost(incomeRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IncomesApi.apiIncomesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IncomesApi - factory interface
 * @export
 */
export const IncomesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IncomesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<IncomeResponseDtoPaginatedResponseApiResponse> {
            return localVarFp.apiIncomesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiIncomesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<IncomeResponseDtoApiResponse> {
            return localVarFp.apiIncomesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesIdPut(id: string, incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiIncomesIdPut(id, incomeRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IncomeRequestDto} [incomeRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiIncomesPost(incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<IncomeResponseDtoApiResponse> {
            return localVarFp.apiIncomesPost(incomeRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IncomesApi - object-oriented interface
 * @export
 * @class IncomesApi
 * @extends {BaseAPI}
 */
export class IncomesApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [filterValue] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomesApi
     */
    public apiIncomesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig) {
        return IncomesApiFp(this.configuration).apiIncomesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomesApi
     */
    public apiIncomesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return IncomesApiFp(this.configuration).apiIncomesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomesApi
     */
    public apiIncomesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return IncomesApiFp(this.configuration).apiIncomesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IncomeRequestDto} [incomeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomesApi
     */
    public apiIncomesIdPut(id: string, incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig) {
        return IncomesApiFp(this.configuration).apiIncomesIdPut(id, incomeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IncomeRequestDto} [incomeRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncomesApi
     */
    public apiIncomesPost(incomeRequestDto?: IncomeRequestDto, options?: RawAxiosRequestConfig) {
        return IncomesApiFp(this.configuration).apiIncomesPost(incomeRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LiabilitiesApi - axios parameter creator
 * @export
 */
export const LiabilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesGet: async (pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (filterValue !== undefined) {
                localVarQueryParameter['FilterValue'] = filterValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['SortBy'] = sortBy;
            }

            if (sortDescending !== undefined) {
                localVarQueryParameter['SortDescending'] = sortDescending;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLiabilitiesIdDelete', 'id', id)
            const localVarPath = `/api/Liabilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLiabilitiesIdGet', 'id', id)
            const localVarPath = `/api/Liabilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdPut: async (id: string, liabilityRequestDto?: LiabilityRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiLiabilitiesIdPut', 'id', id)
            const localVarPath = `/api/Liabilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liabilityRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesPost: async (liabilityRequestDto?: LiabilityRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Liabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(liabilityRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LiabilitiesApi - functional programming interface
 * @export
 */
export const LiabilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LiabilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiabilitiesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityResponseDtoPaginatedResponseApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiabilitiesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiabilitiesApi.apiLiabilitiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiabilitiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiabilitiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiabilitiesApi.apiLiabilitiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiabilitiesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiabilitiesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiabilitiesApi.apiLiabilitiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiabilitiesIdPut(id: string, liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiabilitiesIdPut(id, liabilityRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiabilitiesApi.apiLiabilitiesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLiabilitiesPost(liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiabilityResponseDtoApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLiabilitiesPost(liabilityRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LiabilitiesApi.apiLiabilitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LiabilitiesApi - factory interface
 * @export
 */
export const LiabilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LiabilitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [filter] 
         * @param {string} [filterValue] 
         * @param {string} [sortBy] 
         * @param {boolean} [sortDescending] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<LiabilityResponseDtoPaginatedResponseApiResponse> {
            return localVarFp.apiLiabilitiesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLiabilitiesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<LiabilityResponseDtoApiResponse> {
            return localVarFp.apiLiabilitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesIdPut(id: string, liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiLiabilitiesIdPut(id, liabilityRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LiabilityRequestDto} [liabilityRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLiabilitiesPost(liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<LiabilityResponseDtoApiResponse> {
            return localVarFp.apiLiabilitiesPost(liabilityRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LiabilitiesApi - object-oriented interface
 * @export
 * @class LiabilitiesApi
 * @extends {BaseAPI}
 */
export class LiabilitiesApi extends BaseAPI {
    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [filterValue] 
     * @param {string} [sortBy] 
     * @param {boolean} [sortDescending] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiabilitiesApi
     */
    public apiLiabilitiesGet(pageNumber?: number, pageSize?: number, filter?: string, filterValue?: string, sortBy?: string, sortDescending?: boolean, options?: RawAxiosRequestConfig) {
        return LiabilitiesApiFp(this.configuration).apiLiabilitiesGet(pageNumber, pageSize, filter, filterValue, sortBy, sortDescending, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiabilitiesApi
     */
    public apiLiabilitiesIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LiabilitiesApiFp(this.configuration).apiLiabilitiesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiabilitiesApi
     */
    public apiLiabilitiesIdGet(id: string, options?: RawAxiosRequestConfig) {
        return LiabilitiesApiFp(this.configuration).apiLiabilitiesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {LiabilityRequestDto} [liabilityRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiabilitiesApi
     */
    public apiLiabilitiesIdPut(id: string, liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig) {
        return LiabilitiesApiFp(this.configuration).apiLiabilitiesIdPut(id, liabilityRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LiabilityRequestDto} [liabilityRequestDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiabilitiesApi
     */
    public apiLiabilitiesPost(liabilityRequestDto?: LiabilityRequestDto, options?: RawAxiosRequestConfig) {
        return LiabilitiesApiFp(this.configuration).apiLiabilitiesPost(liabilityRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



